[
    {
        "id": 1,
        "module": "Machine Learning Fundamentals",
        "title": "Linear Regression Implementation",
        "difficulty": "Easy",
        "category": "Supervised Learning",
        "description": "Implement a simple linear regression function that takes X and y as input and returns the coefficients (slope and intercept).",
        "function_name": "linear_regression",
        "initial_code": "def linear_regression(X, y):\n    # Your code here\n    pass",
        "hashtags": ["regression", "supervised-learning", "linear-algebra", "beginner"],
        "test_cases": [
            {
                "input": [[1, 2, 3], [2, 4, 6]],
                "output": [2.0, 0.0]
            },
            {
                "input": [[0, 1, 2], [1, 3, 5]],
                "output": [2.0, 1.0]
            }
        ]
    },
    {
        "id": 2,
        "module": "Machine Learning Fundamentals",
        "title": "K-Means Clustering",
        "difficulty": "Medium",
        "category": "Unsupervised Learning",
        "description": "Implement K-means clustering algorithm from scratch. The function should take input data X and number of clusters k, and return cluster centers and labels.",
        "function_name": "kmeans",
        "initial_code": "def kmeans(X, k):\n    # Your code here\n    pass",
        "hashtags": ["clustering", "unsupervised-learning", "intermediate"],
        "test_cases": [
            {
                "input": [[[0, 0], [1, 0], [0, 1], [10, 10], [11, 10], [10, 11]], 2],
                "output": {"centers": [[0.33, 0.33], [10.33, 10.33]], "labels": [0, 0, 0, 1, 1, 1]}
            }
        ]
    },
    {
        "id": 3,
        "module": "Deep Learning",
        "title": "Neural Network Forward Pass",
        "difficulty": "Medium",
        "category": "Neural Networks",
        "description": "Implement the forward pass of a simple neural network with one hidden layer using numpy. Include ReLU activation for the hidden layer and softmax for the output layer.",
        "function_name": "neural_network_forward",
        "initial_code": "def neural_network_forward(X, weights1, bias1, weights2, bias2):\n    # Your code here\n    pass",
        "hashtags": ["neural-networks", "deep-learning", "forward-propagation", "intermediate"],
        "test_cases": [
            {
                "input": [[[1, 2]], [[0.1, 0.2], [0.3, 0.4]], [0.1, 0.2], [[0.5, 0.6], [0.7, 0.8]], [0.1, 0.2]],
                "output": [0.52, 0.48]
            }
        ]
    },
    {
        "id": 4,
        "module": "MLOps",
        "title": "Model Versioning System",
        "difficulty": "Hard",
        "category": "Model Management",
        "description": "Implement a simple model versioning system that can save and load different versions of a model along with their metadata and performance metrics.",
        "function_name": "model_version_control",
        "initial_code": "class ModelVersionControl:\n    def __init__(self):\n        pass\n    \n    def save_model(self, model, version, metrics):\n        pass\n    \n    def load_model(self, version):\n        pass",
        "hashtags": ["mlops", "version-control", "model-management", "advanced"],
        "test_cases": [
            {
                "input": "test_model_versioning",
                "output": true
            }
        ]
    },
    {
        "id": 5,
        "module": "ML System Design",
        "title": "Real-time Recommendation System",
        "difficulty": "Hard",
        "category": "System Design",
        "description": "Design and implement a simple real-time recommendation system that can handle user interactions and update recommendations accordingly.",
        "function_name": "recommendation_system",
        "initial_code": "class RecommendationSystem:\n    def __init__(self):\n        pass\n    \n    def update_user_interaction(self, user_id, item_id, interaction_type):\n        pass\n    \n    def get_recommendations(self, user_id, n_recommendations=5):\n        pass",
        "hashtags": ["system-design", "recommendations", "real-time", "advanced"],
        "test_cases": [
            {
                "input": "test_recommendation_system",
                "output": true
            }
        ]
    },
    {
        "id": 6,
        "module": "Feature Engineering",
        "title": "Time Series Feature Extraction",
        "difficulty": "Medium",
        "category": "Feature Engineering",
        "description": "Implement functions to extract common time series features like trend, seasonality, and statistical measures from temporal data.",
        "function_name": "extract_time_series_features",
        "initial_code": "def extract_time_series_features(time_series_data):\n    # Your code here\n    pass",
        "hashtags": ["feature-engineering", "time-series", "data-preprocessing", "intermediate"],
        "test_cases": [
            {
                "input": [[1, 2, 3, 4, 5, 4, 3, 2, 1]],
                "output": {"trend": "decreasing", "seasonality": true, "mean": 2.77, "std": 1.39}
            }
        ]
    }
] 